
<!--ServerComponent is a nonroutable Razor component that cannot be accesed through a URL and is instead overlayed on an existing routable component or another nonroutable component-->
@inject NavigationManager navigationManager
@inject IServerEFCoreRepository ServerEFCoreRepository
@if (server != null)
{

    <tr style="background-color: @GetBackgroundColor()">
        <td>
            @server.Name
        </td>
         <td>
            @server.City 
         </td>
        <td style="color:@(server.IsOnline ? "green":"red")">
            <!-- changes the style of the span based on the status of the server -->
            @(server.IsOnline ? "online" : "offline")                       <!-- changes the text of the span based on the status of the server -->
        </td>
       

        <td>
            @if (server.IsOnline)
            {
                Random random = new Random();
                int randomNumber = random.Next(0, 500);
                <text>@randomNumber</text>
            }
            else
            {
                <text>N/A</text>
            }
        </td>


        <td>
        @if (server.IsOnline)
        {
            <button type="button"
            class="btn btn-outline-danger"
            @onclick=  "@(()=> {server.IsOnline = false;})">
                Turn Off
            </button>
                ServerEFCoreRepository.UpdateServer(this.server.ServerID, this.server);
        }
        else
        {
            <button type="button"
            class="btn btn-outline-success"
            @onclick="@(()=> {server.IsOnline = true;})">
                Turn On
            </button>
                ServerEFCoreRepository.UpdateServer(this.server.ServerID,this.server);
        }
        
            <a href="/servers/@server.ServerID" class="btn btn-link">Edit</a>
        </td>

   

      



     <td>
            <EditForm Model="server"
                      FormName="@($"form-server-{server.ServerID}")"
                      OnValidSubmit="@(() => {DeleteServer(server.ServerID); })">
                <button type="submit" class="btn btn-primary">Delete</button>
            </EditForm>
     </td>
       

        @*        @if(editingServer)
        {
            <ServerManagement2._0.Components.Pages.EditServer id="this.server.ServerID"></ServerManagement2._0.Components.Pages.EditServer>
        } *@

    </tr>

}


@code {
    private bool editingServer = false;

    [Parameter]
    public Server? server { get; set; } = new Server { Name = "Server1", City = "Toronto" };


    [CascadingParameter(Name = "SelectedCity")]   
    public string? SelectedCity { get; set; } 

    private void DeleteServer(int serverID)
    {
        if (serverID > 0)
        {
            ServerEFCoreRepository.DeleteServer(serverID);
            navigationManager.NavigateTo("/servers", true);
        }


    }

    private string GetBackgroundColor()
    {
        if (SelectedCity != null)
        {
            switch(this.SelectedCity)
            {
                   case "Toronto": return "powderblue";
                   case"Montreal": return "lightgrey";
                   case "Ottawa": return "palegreen";
                   case "Calgary": return "pink";
                   case "Halifax": return "white";
                default: return "white";  
            }
        }
        else
            return "white";
    }


}
