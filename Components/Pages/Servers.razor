@page "/servers"       // This is a routable component; They are placed inside the root component using the URL /servers
@rendermode InteractiveServer               // interactivity location cahnges what parts of the webapp are interactive; this can be set in a specific component or on the root level in the App.razor file making the entire app interactive
@* It is best to set the interactivity wherever the component is used instead of inside the component definition to not lock its interactivity*@
@*if you use global interactivity you can use @attribute [ExcludeFromInteractiveRouting] to make a certain component use static serverside rendering *@
@inject NavigationManager navigationManager  // Inject the NavigationManager service; 
<h3>
    Servers 

</h3>


<CityListComponent
SelectCityCallback="HandleCitySelection"></CityListComponent>


<br />


<SearchBarComponent searchCallback="HandleSearchServer"></SearchBarComponent>

<CascadingValue Name="SelectedCity" Value="@selectedCity">
    <ServerListComponent 
        @rendermode="InteractiveServer"
        CityName="@this.selectedCity"
        SearchFilter="@this.searchFilter"></ServerListComponent>
</CascadingValue>


<br />

<p>
    <a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>

@code {

    private string selectedCity = "Toronto";
    private string searchFilter = "";
    private void HandleSearch()
    {
        //  this.servers = ServersRepository.SearchServers(serverFilter);
        //  this.selectedCity = string.Empty;
    }


    private void HandleCitySelection(string cityName)
    {
        selectedCity = cityName;
        this.searchFilter = "";
    }
    private void HandleSearchServer(string searchFilter)
    {
        this.searchFilter = searchFilter;
     
    }

}
